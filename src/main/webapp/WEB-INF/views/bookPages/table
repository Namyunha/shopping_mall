create table book_table
(
    id           bigint auto_increment primary key,
    sellerId     bigint,
    bookName     varchar(50) not null,
    unitPrice    bigint      not null,
    unitsInStock bigint      not null default 0, -- 재고수 --
    author       varchar(30),                    -- 설명 --
    descript     varchar(20),                    -- 출판사 --
    publisher    varchar(10),
    category     varchar(10),
    conditions   varchar(10),
    fileAttached int                  default 0,
    constraint fk_book_table_customer_table foreign key (sellerId) references customer_table (id) on delete cascade
);


select *
from book_table;

select *
from cart_table;

select *
from customer_table;


drop table if exists book_table;


create table book_file_table
(
    id               bigint auto_increment primary key,
    originalFileName varchar(100),
    storedFileName   varchar(100),
    bookId           bigint,
    constraint fk_book_file_table_book_table foreign key (bookId) references book_table (id) on delete cascade
);

select unitPrice * unitsInStock
from book_file_table f,
     book_table b
where f.bookId = b.id;

select *
from book_file_table f,
     book_table b
where f.bookId = b.id;

select sum(c.bookCount * b.unitPrice) as 'sumPrice', sum(bookCount) as 'sumCount'
from book_table b,
     cart_table c
where b.id = c.bookId;

select sum(bookCount) as 'sumCount'
from book_table b,
     cart_table c
where b.id = c.bookId;

select *
from book_table b,
     cart_table c
where b.id = c.bookId;

drop table if exists book_file_table;


create table category_table
(
    id   bigint auto_increment primary key,
    name varchar(10)
);


select sum(c.bookCount * b.unitPrice) as 'sumPrice', sum(bookCount) as 'sumCount'
from book_table b,
     cart_table c
where b.sellerId = 2
  and b.id = c.bookId;

select *
from cart_table;



create table cart_table
(
    id         bigint auto_increment primary key,
    bookId     bigint not null,
    customerId bigint not null,
    bookCount  bigint default 0,
    constraint fk_cart_table_bookId foreign key (bookId) references book_table (id) on delete cascade,
    constraint fk_cart_table_customerId foreign key (customerId) references customer_table (id) on delete cascade
);

drop table if exists cart_table;

create table customer_table
(
    id       bigint auto_increment primary key,
    name     varchar(10) not null,
    nickname varchar(10),
    email    varchar(20),
    password varchar(20),
    address  varchar(100)
);

drop table if exists customer_table;


create table order_table
(
    id                 bigint auto_increment primary key,
    bookId             bigint,
    customerId         bigint,
    sumCount           bigint,
    sumPrice           bigint,
    customerName       varchar(20),
    payConditions      varchar(20),
    shipmentConditions varchar(20),
    address            varchar(100),
    email              varchar(20),
    createdDate        datetime default now(),
    constraint fk_order_table_book_table foreign key (bookId) references book_table (id) on delete cascade,
    constraint fk_order_table_customer_table foreign key (customerId) references customer_table (id) on delete cascade

);

drop table if exists order_table;


select *
from book_table b,
     cart_table c
where b.id = c.bookId;

select b.id, b.bookName, sum(c.bookCount), b.unitPrice
from cart_table c,
     book_table b
where b.id = c.bookId
group by c.bookId;

select *
from cart_table c,
     book_table b
where b.id = c.bookId;

select sum(c.bookCount)
from cart_table c,
     book_table b
where b.id = c.bookId
group by c.bookId;

select b.id, b.bookName, sum(c.bookCount) as 'bookCount', b.unitPrice
from cart_table c,
     book_table b
where b.id = c.bookId
group by c.bookId;

select sum(bookCount)
from cart_table
group by bookId;


select sum(c.bookCount * b.unitPrice), sum(bookCount)
from book_table b,
     cart_table c
where c.customerId = 1
  and b.id = c.bookId;